// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиЛогирования = ЛогированиеТрафика.ЗагрузитьНастройкиЛогирования();
	ВключеноЛогирование  = НастройкиЛогирования.ВключеноЛогирование;
//	ВключенаТрассировка  = НастройкиЛогирования.ВключенаТрассировка;
//	ТаймаутЗапросов      = НастройкиЛогирования.ТаймаутЗапросов;
//	ПовторПриОшибкеСоединения = НастройкиЛогирования.ПовторПриОшибкеСоединения;
//	СрокХранения = НастройкиЛогирования.СрокХранения;
//	ИмяПеременнойСредыДляСохраненияЛоговHTTP = Константы.ИмяПеременнойСредыДляСохраненияЛоговHTTP.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ГотовоНаСервере();
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьНажатие(Элемент)
	
	КомандаОчиститьНажатиеНаСервере(СрокХранения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ГотовоНаСервере()
	
	Настройки = ЛогированиеТрафика.НовыеНастройкиЛогирования();
	Настройки.ВключеноЛогирование  = ВключеноЛогирование;
//	Настройки.ВключенаТрассировка  = ВключенаТрассировка;
//	Настройки.ТаймаутЗапросов      = ТаймаутЗапросов;
//	Настройки.ВключеныАвтоответы   = ВключеныАвтоответы;
//	Настройки.ВключеныАвтосценарии = ВключеныАвтосценарии;
//	Настройки.ПовторПриОшибкеСоединения = ПовторПриОшибкеСоединения;
//	Настройки.СрокХранения = СрокХранения;
	ЛогированиеТрафика.СохранитьНастройкиЛогирования(Настройки);
//	Константы.ИмяПеременнойСредыДляСохраненияЛоговHTTP.Установить(ИмяПеременнойСредыДляСохраненияЛоговHTTP);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаОчиститьНажатиеНаСервере(СрокХранения)
	
	РегистрыСведений.ЛогиТрафика.ОчиститьИсторию(СрокХранения);
	
КонецПроцедуры

#КонецОбласти