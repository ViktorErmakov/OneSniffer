// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Новый лог запроса.
// 
// Параметры:
//  Соединение - HTTPСоединение
//  Запрос - HTTPЗапрос
//  ИмяМетода - Строка
//  ИмяСобытия - Строка
// 
// Возвращаемое значение:
//  см. НовыйЛогЗапроса
//
Функция ЛогЗапроса(Соединение, Запрос, ИмяМетода, ИмяСобытия = "") Экспорт
	
	// Проверка использования.
	НастройкиЛогирования = ЛогированиеТрафика.ЗагрузитьНастройкиЛогирования();
	Если Не НастройкиЛогирования.ВключеноЛогирование Тогда
		Возврат Неопределено;
	КонецЕсли;
	
//	// Добавление идентификатора для отслеживания запросов.
//	Если НастройкиЛогирования.ВключенаТрассировка Тогда
//		HTTPЗапрос.Заголовки.Вставить("x-b3-traceid", СгенерироватьИдентификатор());
//		HTTPЗапрос.Заголовки.Вставить("x-b3-spanid",  СгенерироватьИдентификатор());
//	КонецЕсли;
	
	Метод = Перечисления.МетодHTTP[ИмяМетода];
	ЛогЗапроса = НовыйЛогЗапроса(Метод, ИмяСобытия, Соединение, Запрос);
	ЛогЗапроса.Событие = ИмяСобытия;
	ЛогированиеТрафика.ИмяСобытия(ЛогЗапроса.Событие, Запрос.АдресРесурса);
	
	Возврат ЛогЗапроса;
	
КонецФункции

// Записать лог.
// 
// Параметры:
//  ЛогЗапроса - см. НовыйЛогЗапроса
//  ИмяВыходногоФайла - Строка -  Имя выходного файла
//  ТекстОшибки - Строка -  Текст ошибки
//
Процедура ЗаписатьЛог(ЛогЗапроса, ИмяВыходногоФайла = "", ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		HTTPЗапрос = ЛогЗапроса.HTTPЗапрос;
		Соединение = ЛогЗапроса.Соединение;
		HTTPОтвет = ЛогЗапроса.HTTPОтвет;

		// Запись ответа
		Запись = СоздатьМенеджерЗаписи();
		Запись.Дата   = ЛогЗапроса.Дата;
		Запись.Метод  = ЛогЗапроса.Метод;
		Запись.Сервер = Соединение.Сервер;
		Запись.Порт   = Соединение.Порт;
		Запись.ЭтоЗащищенноеСоединение = (Соединение.ЗащищенноеСоединение <> Неопределено);
//		Запись.Адрес  = ?(Лев(HTTPЗапрос.АдресРесурса, 1) = "/", "", СтрШаблон("/%1", ЛогЗапроса.HTTPЗапрос.АдресРесурса));
		Запись.Адрес  = HTTPЗапрос.АдресРесурса;
		Запись.ВремяНачала = ЛогЗапроса.ВремяНачала;
//		Запись.Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
		Запись.Пользователь = Пользователи.ТекущийПользователь().ПолноеНаименование();
		Запись.Клиент       = ИмяКомпьютера();
		Запись.Событие      = ЛогЗапроса.Событие;
		
		ЛогЗапроса.Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ЛогЗапроса.ВремяНачала)/1000;
		Запись.Длительность = ЛогЗапроса.Длительность;
		Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
		
		Содержание = НовоеСодержаниеЗапроса();
		Содержание.ЗаголовкиЗапроса = HTTPЗапрос.Заголовки;
		Содержание.ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакДвоичныеДанные();
		Содержание.ЗаголовкиОтвета = Неопределено;
		Содержание.ТелоОтвета = Неопределено;
		
		// Проверка авторизации
		Если ЗначениеЗаполнено(Соединение.Пользователь)
			И Содержание.ЗаголовкиЗапроса.Получить("Autorization") = Неопределено Тогда
			
//			АвторизацияOAuth = "Basic " + СтрокаBase64(Соединение.Пользователь + ":" + Соединение.Пароль);
			АвторизацияOAuth = СтрШаблон(
				"Basic %1", 
				Base64Значение(СтрШаблон("%1:%2", Соединение.Пользователь, Соединение.Пароль)));
			
			Содержание.ЗаголовкиЗапроса.Вставить("Autorization", АвторизацияOAuth);
			
		КонецЕсли;
		
		Если HTTPОтвет <> Неопределено Тогда
			Если ИмяВыходногоФайла = Неопределено Тогда
				
				Если HTTPОтвет.Заголовки["content-encoding"] = "gzip" Тогда
					ДвоичныеДанныеОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
					ТелоОтвета = ЛогированиеТрафика.РаспаковатьФайлGZip(ДвоичныеДанныеОтвета);
				Иначе
					ТелоОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
				КонецЕсли;
				
			Иначе
				ТелоОтвета = Новый ДвоичныеДанные(ИмяВыходногоФайла);
			КонецЕсли;
			Если ТелоОтвета <> Неопределено Тогда
				Запись.РазмерОтвета        = ТелоОтвета.Размер()/1000;
				Содержание.ТелоОтвета      = ТелоОтвета;
			КонецЕсли;
			Запись.КодОтвета           = HTTPОтвет.КодСостояния;
			Содержание.ЗаголовкиОтвета = HTTPОтвет.Заголовки;
		ИначеЕсли ТекстОшибки <> Неопределено Тогда
			Содержание.ТелоОтвета    = ТекстОшибки;
		КонецЕсли;
		
		Запись.Содержание = Новый ХранилищеЗначения(Содержание, Новый СжатиеДанных(5));
		
		Если Метаданные.Подсистемы.Найти("СтандартныеПодсистемы") <> Неопределено Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			Запись.Разделитель = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		КонецЕсли;
		
		Запись.Записать(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр("ru = 'Ошибка записи логирования.'")
			+ Символы.ПС + НСтр("ru = 'Метод:'") + " " +ЛогЗапроса.Событие + "."
			+ Символы.ПС + ПолучитьСтрокуURLЗапроса(ЛогЗапроса.Метод, ЛогЗапроса.Сервер,
				ЛогЗапроса.Соединение.ЗащищенноеСоединение, ЛогЗапроса.Соединение.Порт,
				ЛогЗапроса.HTTPЗапрос.АдресРесурса)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации("OneSniff", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ЛогиТрафика,, ТекстОшибки);
		
	КонецПопытки;
	
//	ЗаписатьЛогЗапросаВФайл(ЛогЗапроса, ТекстОшибки);
	
КонецПроцедуры

// Очистить историю.
// 
// Параметры:
//  СрокХранения - Число - количество дней.
//
Процедура ОчиститьИсторию(СрокХранения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛогиТрафика.НомерСеанса КАК НомерСеанса,
	|	ЛогиТрафика.Дата КАК Дата,
	|	ЛогиТрафика.Сервер КАК Сервер,
	|	ЛогиТрафика.Метод КАК Метод,
	|	ЛогиТрафика.ВремяНачала КАК ВремяНачала
	|ИЗ
	|	РегистрСведений.ЛогиТрафика КАК ЛогиТрафика
	|ГДЕ
	|	ЛогиТрафика.Дата < &СрокХранения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("СрокХранения", ТекущаяДатаСеанса() - СрокХранения * 24*60*60);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// TODO Блокировка нужна
	
	СчетчикТранзакции = 0;
	Пока Выборка.Следующий() Цикл
		
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		СчетчикТранзакции = СчетчикТранзакции + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новый лог запроса.
// 
// Параметры:
//  Метод - ПеречислениеСсылка.МетодHTTP
//  Событие - Строка
//  Соединение - HTTPСоединение
//  HTTPЗапрос - HTTPЗапрос
// 
// Возвращаемое значение:
//  Структура:
// * Метод - ПеречислениеСсылка.МетодHTTP
// * Событие - Строка
// * Дата - Дата
// * ВремяНачала - Число
// * Длительность - Число
// * Соединение - HTTPСоединение
// * HTTPЗапрос - HTTPЗапрос
// * HTTPОтвет - HTTPОтвет, Неопределено - ответ сервиса.
// * Сервер - Строка
// * Входящий - Булево
//
Функция НовыйЛогЗапроса(Метод, Событие, Соединение, HTTPЗапрос)
	
	ЛогЗапроса = Новый Структура;
	ЛогЗапроса.Вставить("Метод",        Метод); // POST, GET...
	ЛогЗапроса.Вставить("Событие",      Событие);
	ЛогЗапроса.Вставить("Дата",         ТекущаяДатаСеанса());
	ЛогЗапроса.Вставить("ВремяНачала",  ТекущаяУниверсальнаяДатаВМиллисекундах());
	ЛогЗапроса.Вставить("Длительность", 0);
	ЛогЗапроса.Вставить("Соединение",   Соединение);
	ЛогЗапроса.Вставить("HTTPЗапрос",   HTTPЗапрос);
	ЛогЗапроса.Вставить("HTTPОтвет",    Неопределено);
	ЛогЗапроса.Вставить("Сервер",       ?(ТипЗнч(Соединение) = Тип("HTTPСоединение"), Соединение.Сервер, ""));
	ЛогЗапроса.Вставить("Входящий",     Ложь);
	
	Возврат ЛогЗапроса;
	
КонецФункции

Функция НовоеСодержаниеЗапроса()
	
	Содержание = Новый Структура;
	Содержание.Вставить("ЗаголовкиЗапроса");
	Содержание.Вставить("ТелоЗапроса");
	Содержание.Вставить("ЗаголовкиОтвета");
	Содержание.Вставить("ТелоОтвета");
	
	Возврат Содержание;

КонецФункции

Функция ПолучитьСтрокуURLЗапроса(Метод, Сервер, ЗащищенноеСоединение, Порт, Адрес, ИсключитьПараметры = Ложь) Экспорт
	
	СтрокаПорт = ?(Не ЗначениеЗаполнено(Порт) Или Порт = 80 Или Порт = 443, "", ":" + Формат(Порт, "ЧГ="));
	Результат = "" + ?(Метод = "", "", ВРег(Метод) + " ")
		+ ?(ЗащищенноеСоединение = Неопределено Или ЗащищенноеСоединение = Ложь, "http://", "https://")
		+ Сервер + СтрокаПорт + ?(Лев(Адрес, 1) = "/", "", "/") + Адрес;
		
	Если ИсключитьПараметры Тогда
		РазделительПараметры = СтрНайти(Результат, "?");
		Если РазделительПараметры <> 0 Тогда
			Результат = Лев(Результат, РазделительПараметры - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли